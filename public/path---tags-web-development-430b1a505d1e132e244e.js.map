{"version":3,"sources":["webpack:///path---tags-web-development-430b1a505d1e132e244e.js","webpack:///./.cache/json/tags-web-development.json"],"names":["webpackJsonp","421","module","exports","pathContext","posts","html","id","frontmatter","date","path","title","excerpt","tags","tagName"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAUC,KAAA,0jJAAAC,GAAA,oHAAAC,aAAutJC,KAAA,4BAAAC,KAAA,uBAAAC,MAAA,uDAAAC,QAAA,KAAAC,MAAA,mDAA0MP,KAAA,m3NAA67GC,GAAA,oHAAAC,aAAqlHC,KAAA,4BAAAC,KAAA,mBAAAC,MAAA,gDAAAC,QAAA,KAAAC,MAAA,oDAAgMP,KAAA,s7LAA0iLC,GAAA,oHAAAC,aAAijBC,KAAA,4BAAAC,KAAA,cAAAC,MAAA,8EAAAC,QAAA,KAAAC,MAAA,mIAAsSC,QAAA","file":"path---tags-web-development-430b1a505d1e132e244e.js","sourcesContent":["webpackJsonp([246627563894452],{\n\n/***/ 421:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"posts\":[{\"html\":\"<p>This article first appeared on Medium <a href=\\\"https://hackernoon.com/postgresql-explained-with-basketball-players-f99fb812c065\\\"><strong>here</strong></a></p>\\n<p>There are certain instances in my childhood that stand out above the rest. A good number of these involve some sort of video game, with my face glued to a screen. One of the earliest games I could remember was King’s Quest VI, a choose your own adventure game that ran on probably the first computer I ever touched. A few years later, I remember heading to the Toys ‘R’ Us in Sheepshead Bay, where I would make arguably one of the biggest decision a kid in Brooklyn could make in the mid-1990’s — Red version or Blue.</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1600/1*_MdfIi7rGx6Yz8rqXvcbKQ.jpeg\\\" alt=\\\"Red Blue\\\"></p>\\n<p>Fast forward to 2017.</p>\\n<p>For the majority of my coding journey, I’ve tinkered with mostly JavaScript-related stuff. Node has been my backend of choice and React has been my favorite library. But when there’s so much excitement about a little thing called Python, that is knowledge I couldn’t ignore.</p>\\n<h2>The Python Experiment</h2>\\n<p>To be honest, my interest in Python came more from machine learning and data scraping. Beautiful Soup is fantastic, and the ease of the language makes it so much more attractive to use on a backend, despite having more experience in Node.</p>\\n<p>But while Python has all these more practical features, there will always be room for a short project that tugs at my nostalgia. So I took a couple days to try and make a console application.</p>\\n<p>Why a console application? The terminal is an oft disregarded program that’s use is either for working with Git (for developers) or for completely ignoring in case you cause your computer to blow up (for the non-techies). Becoming comfortable with the console is what all programmers to strive for, and the lack of a true GUI allows the creator to focus solely on what his or her code is doing, and not how it looks on a particular browser.</p>\\n<p>As I scoured the Internet for more examples of what other developers have done in the console, I saw plenty of fantasy-driven storylines, where the hero grabs a sword at some point and fights a dragon. This is all well and good. My original idea was to do something The Legend of Zelda-related. This sort of adventure seemed to fit the bill of a choose your own adventure game. However, the memory of that Toys ‘R’ Us trip in ’97 kept coming back to me.</p>\\n<p>Making decisions is at the heart of the Pokémon formula. While Link deals with adding inventory and fighting enemies, the basis of Pokémon falls on which creature you’ll start with, and how this decision will impact your future as a trainer.</p>\\n<p>The overall code runs pretty simply. The main() function runs in the bottom of the code, then calls the functions that above it. Each decision is a function that features a future function at the bottom of it. At the moment, it is not the most complicated decision tree, but it manages to currently have over a half-dozen outcomes depending on your choices. The code runs in the terminal with the use of a virtual environment, something that I was unfamiliar with, coming from the JavaScript world.</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1200/1*I51KEPyZyOm0AyqOSadG0A.gif\\\" alt=\\\"Start Screen\\\"></p>\\n<p>I had a blast creating this mini-application, but it is, overall, a simple game. There are no classes — this would make a more intricate battle system with hit points and whatnot. Neither am I using Pickle to save progress. The game is currently short enough to finish in one setting. While I could continue with the storyline, travel to gyms, and obtain badges, this would best be served in a future application, where I would create my own characters, implement a true battle system, and make use of the creative writing minor I received while at undergrad.</p>\\n<p>As a lifelong learner and frequent teacher, I will say that creating a fun application like this serves the purpose of teaching without a struggle. More challenging concepts came more naturally because I was having fun. What’s more — seeing the beauty of what Python can create gave me a greater appreciation for JavaScript, a language I’ve played around with all too well, yet never understood how strange it could be when compared with other languages. I even had the pleasure of adding an Easter egg that allows the user to obtain Pikachu as his starting Pokémon. Not bad for a silly console, application, huh?</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1600/1*QtgyiFepJTh9TBjwTsKarg.gif\\\" alt=\\\"Pokemon Choice\\\"></p>\",\"id\":\"/Users/jonathanhaines/Desktop/Code/gatsby/blog-1/src/pages/2017-09-20/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-09-20T09:20:02+00:00\",\"path\":\"/blog/pokemon-python\",\"title\":\"Return of the Consoles: Recreating Pokémon in Python\",\"excerpt\":null,\"tags\":[\"pokemon\",\"python\",\"console\",\"web development\"]}},{\"html\":\"<p>This article first appeared on Medium <a href=\\\"https://hackernoon.com/postgresql-explained-with-basketball-players-f99fb812c065\\\"><strong>here</strong></a></p>\\n<p>Database can be a scary word. It’s often considered large and complicated, but they can work wonders for keeping your application neat and in order. For more on the differences between the two main types of databases, here is a primer that may be of assistance.</p>\\n<p>As for what you’re about to read, I’d strongly recommend following along with PSequel, a GUI on Mac that allows you to see the data you are working with. Basketball, like many sports, is filled with data that makes it more interesting. A stat line is essential a chunk of data. Russell Westbrook might as well be a statistician with his triple-double prowess. And what better way to prepare for the upcoming basketball season than to prepare some databases based on player attributes.</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1200/1*IW1nAu2fLYTDA4P75CDdmA.jpeg\\\" alt=\\\"Russell Westbrook\\\"></p>\\n<p>One more bit of exposition. PostgreSQL is one of the top programs for relational databases. While there are other good ones such as MySQL and SQLite, I have found PostgreSQL to be most favorable since it’s open-sourced and has a pretty great online community.</p>\\n<p>And now, it’s gametime.</p>\\n<h2>Create a Database</h2>\\n<p>Creating a database is simple. First things first, make sure you’re server is running on the command line by running:</p>\\n<p><code>psql</code>\\nNow that you’re logged in, creating a database is as easy as:</p>\\n<p><code>create database (name of database);</code>\\nOnce it’s created, you could see a list of all of your databases with the \\\\l command. To quit from the command line, you can use \\\\q.</p>\\n<h2>Enter PSequel</h2>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1200/1*lUqYbocVY1oP0a2e_Ig5Cw.png\\\" alt=\\\"Connect DB\\\"></p>\\n<p>PSequel is a GUI that makes viewing your data a little easier. I created a database called basketball. Now let’s connect and create some tables.</p>\\n<h2>Table Creation</h2>\\n<p>Once you’ve connected, you’re free to create tables that will organize all of your data. With ‘query’ selected, we can create a table like this:</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/2000/1*dS4iXk4Y-cwCAmLK7wh4XA.png\\\" alt=\\\"Table Players\\\"></p>\\n<p>From above, we can see that I am creating a table called ‘players.’ Inside this table, there will be four rows: an ID (mostly to keep track of how many people I am adding), a first name, a last name, and a team. You’ll notice there is a datatype listed after these, which lets the database know what kind of data to expect. Integer is a number. Varchar stands for a ‘variable-length character’ string. The number following this in parenthesis is the maximum number of characters. For more on what kind of datatypes you can use in PostgreSQL, check out <a href=\\\"https://www.postgresql.org/docs/9.5/static/datatype.html\\\"><strong>this nifty list</strong></a>. So the team listed will only be able to hold three characters. Once this is done, run the query and refresh the page (bottom left).</p>\\n<p>The table, although empty, can now be found in the ‘content’ tab. But we can’t work with an empty table. Let’s add to it.</p>\\n<h2>All About Insert</h2>\\n<p>With your brand new empty table, head back over to query and insert the following:</p>\\n<p><code>INSERT INTO players (id, first_name, last_name, team) VALUES (1, 'Steph', 'Curry', 'GSW');</code></p>\\n<p>Here, I am inserting records into my ‘players’ table. The first set of parenthesis, while not mandatory, tells the database which columns the data will go into. You can put the columns in whatever order you want here, as long as it corresponds to the second parenthesis group. For example, PSequel would not allow it if I tried to put an integer into the first name field. It’s also important that strings (or varchars) are put into quotes.</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1200/1*KIUHPBaix7AjKfF2t8eJPw.gif\\\" alt=\\\"Curry Dance\\\"></p>\\n<p>Easy enough? Alright, let’s add some more data and see how to manipulate it.</p>\\n<h2>Selecting Your All Stars</h2>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1600/1*BWPN3X2jtd0myX3NoCrpcg.png\\\" alt=\\\"All Stars\\\"></p>\\n<p>We have some data to work with\\nFrom the image provided, now we can select and manipulate the players. Quite a squad we have so far. Head back into query and run the following line:</p>\\n<p><code>SELECT * FROM players</code>\\nFrom here, you can see everyone. But what if you only wanted to see players from the Golden State Warriors? Next, run the following lines:</p>\\n<p><code>SELECT * FROM players WHERE team = 'GSW'</code></p>\\n<p>This ‘where’ keyword is especially important when we want to update or delete items from the database. Other keywords can be concatenated to these lines to show even more data.</p>\\n<p>`<code>SELECT * FROM players WHERE team = 'GSW' OR team = 'NY'</code></p>\\n<p>The statement above will show you anyone from either Golden State or New York. Notice the ‘or’ statement.</p>\\n<p><code>SELECT * FROM players WHERE team = 'GSW' AND first_name = 'Steph'</code></p>\\n<p>This statement would return just Steph Curry, since while Klay Thompson does share the same team (GSW), his first name does not match.</p>\\n<p>You may also run greater than, less than, or equal to statements for integers. Take the following example and notice that the first two IDs are not returned.</p>\\n<p><code>SELECT * FROM players WHERE id > 3</code></p>\\n<h1>Updating and Deleting</h1>\\n<p>Let’s now change something in our database. We’ve heard some speculation about Lebron James heading to the Lakers after his contract is up. How can we reflect this in our data:</p>\\n<p><code>UPDATE players SET team = 'LAL' WHERE last_name = 'James'</code></p>\\n<p>The first line specifies the table you are changing. The second line specifies what we are setting. The third line tells us that we only want to change the data that has a last name of James. Like the earlier examples, we could have added more parameters, as well as ‘and’ or ‘or’ statements.</p>\\n<p>Notice that Lebron James now plays for the Los Angeles Lakers. By clicking on the ID column header, we could once again order the players by their IDs (or any other header for that matter.</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1600/1*PYjYWd-1H7KtdGpwLw9vBA.png\\\" alt=\\\"Lebron Laker\\\"></p>\\n<p>Deleting is done in a similar manner, but by using the word ‘delete’ instead of update. And once again, we can add as many parameters as we want. The command below wipes Lebron James from the list.</p>\\n<p><code>DELETE players WHERE last_name = 'James' AND team = 'LAL'</code></p>\\n<p>But he probably wouldn’t like that.</p>\\n<iframe src=\\\"https://giphy.com/embed/xTiTnDAP0RiCo9k85W\\\" width=\\\"480\\\" height=\\\"276\\\" frameBorder=\\\"0\\\" class=\\\"giphy-embed\\\" allowFullScreen></iframe><p><a href=\\\"https://giphy.com/gifs/sbnation-xTiTnDAP0RiCo9k85W\\\"></a></p>\",\"id\":\"/Users/jonathanhaines/Desktop/Code/gatsby/blog-1/src/pages/2017-09-17/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-09-17T09:20:02+00:00\",\"path\":\"/blog/postgresql\",\"title\":\"PostgreSQL, Explained With Basketball Players\",\"excerpt\":null,\"tags\":[\"nba\",\"postgresql\",\"database\",\"web development\"]}},{\"html\":\"<p>This article first appeared on Medium <a href=\\\"https://hackernoon.com/postgresql-explained-with-basketball-players-f99fb812c065\\\"><strong>here</strong></a></p>\\n<p>Computational complexity is a tricky subject to wrap one’s head around. Understanding runtime allows one to see how well a particular algorithm or data structure could scale within a computer. Unfortunately, it may be a bit abstract to try and think like a computer — for example, what does it mean to say that accessing a node in a linked list is O(n) while inserting a node is the more preferred O(1)? To truly get these concepts, let’s use real life (err.. Super Nintendo) examples to figure out what these terms mean. </p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1200/1*BuW10tGA1gyCnUTYP3YeFQ.png\\\" alt=\\\"Big O Cheat Sheet\\\"></p>\\n<p>Here is a graph (from bigocheatsheet.com) that depicts the scalability of different runtime complexities. While all runtimes begin at the same point at the bottom lefthand corner, adding more elements changes how efficient each is. While it might not make a difference whether or not you use an array to store some data in your mini-side project, perhaps that same project might not scale as well once you finally successfully gain the attention of some wealthy investors.</p>\\n<h2>O(1)</h2>\\n<p>O(1), pronounced “oh of one” is simply the best. If it were personified, it would be Michael Jordan. Unless you had access to a time machine, there is no way to have a better runtime.</p>\\n<p>How does it work? Imagine the year is 1991 and you are getting your first experience playing a brand new game called Street Fighter II. Your friend tells you that you should try Guile, because his Sonic Boom is pretty awesome. Unfortunately, the only information you have is the name Guile. You have no idea what he or she looks like and it’s another seven years before Google is founded. You could do a bit of deducing, sure, but you decide there is a quicker way. All you have to do is ask your friend, “Which one of these characters is Guile?”</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1200/1*M2xEJSZfHjgwugvVsARuIA.jpeg\\\" alt=\\\"Street Fighter Original Select Screen\\\"></p>\\n<p>Your friend responds by pointing to Guile after just one question. O(1) means just that — your problem is solved in constant time. It doesn’t matter whether or not there are 8 characters or 800, this is always completed instantaneously.</p>\\n<h2>O(log n)</h2>\\n<p>As effective as the previous method was, the real world is usually not as smooth. The next best thing may be O(log n).</p>\\n<p>O(log n) algorithms are best described as never having to look at the entirety of an input. As in a binary search, O(log n) is basically taking data, splitting it in half, then taking the data you are left with, and splitting that in half. This is done until you reach your answer.</p>\\n<p>To use the Street Fighter example, imagine you ask your friend “Is Guile in the top row?” This drops the original eight fighters to four. By constantly cutting the total number of choices in half, you can eventually reach Guile.</p>\\n<h2>O(n)</h2>\\n<p>O(n) is perhaps the easiest of runtimes to comprehend. The bigger the input, the more time this will take, and they increase at the same rate. In the O(1) section, we discovered the most effective way of figuring out which character is Guile by asking one question. To use O(n), we would ask our friend about each character individually. Starting with the first character, we would ask “is this Guile?” If he says yes, we are done (this is the best-cased scenario). If not, we move onto the next character. With just eight characters to consider, it would take just eight questions (at worst). However, if the input becomes larger, such as if we add eight MORE characters, the runtime becomes slower.</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1600/1*N1-PCyTMbY2qMBJMfzi53Q.png\\\" alt=\\\"Street Fighter Newer Select Screen\\\"> </p>\\n<h2>O(n²)</h2>\\n<p>The complexity of O(n²) is where things get a bit trickier. If you take a look at the Big O graph at the top of this article, you’ll notice that the line that depicts this particular runtime is curved, due to it being polynomial time.</p>\\n<p>Quadratic or polynomial runtimes usually contain nested for-loops. One nested for-loop implies O(n²) while a second nested for-loop would mean O(n³) and so on (with possibly but unlikely exceptions).</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1200/1*glyhac4CbLz25CyUj-ERHA.png\\\" alt=\\\"Street Fighter Cast\\\"></p>\\n<p>How does this work in our Street Fighter example? Imagine you are able to ask the actual characters themselves questions. You approach the first character and ask if his name is Guile. If he responds “yes, I am” (the best-cased scenario), then you are done. However, if his response is “no,” this begins a nested for-loop. This character (let’s say Ryu) then becomes the question master and approaches a second character to do the asking for you. Similarly, he asks this second character (let’s say Ken) one at a time whether or not he is Guile. The process continues until the original question’s response is “yes.” As the graph implies, the larger data makes things last a tad longer.</p>\\n<h2>O(2^n) and O(n!)</h2>\\n<p>Two less common runtime are the exponential O(2^n) and the seemingly forever factorial O(n!). If a program is running in either of these, it would be advised to consider a new approach.</p>\\n<p>O(2^n) is usually seen during a recursive function where you call a function twice within itself such as the Fibonacci example here:</p>\\n<p><code>fib(n) = { return fib(n-1) + fib(n-2) }</code></p>\\n<p>Big O is a lot more complex than a Street Fighter selection screen, but understanding the basics is a good start. Like with Super Nintendo, understanding the more complex aspects of Big O requires plenty of practice and perhaps a bit of reading the instructional booklet.</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1600/1*wuby9nnyYE9eo5zgk0H9xw.gif\\\" alt=\\\"Street Fighter Ken Dragon Punch\\\"></p>\",\"id\":\"/Users/jonathanhaines/Desktop/Code/gatsby/blog-1/src/pages/2017-09-11/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-09-11T09:20:02+00:00\",\"path\":\"/blog/big-o\",\"title\":\"The Simplicity of Computational Complexity: Street Fighter II VS. the Big O\",\"excerpt\":null,\"tags\":[\"big o notation\",\"computational complexity\",\"runtime\",\"code\",\"algorithms\",\"data structures\",\"web development\",\"street fighter\"]}}],\"tagName\":\"web development\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tags-web-development-430b1a505d1e132e244e.js","module.exports = {\"pathContext\":{\"posts\":[{\"html\":\"<p>This article first appeared on Medium <a href=\\\"https://hackernoon.com/postgresql-explained-with-basketball-players-f99fb812c065\\\"><strong>here</strong></a></p>\\n<p>There are certain instances in my childhood that stand out above the rest. A good number of these involve some sort of video game, with my face glued to a screen. One of the earliest games I could remember was King’s Quest VI, a choose your own adventure game that ran on probably the first computer I ever touched. A few years later, I remember heading to the Toys ‘R’ Us in Sheepshead Bay, where I would make arguably one of the biggest decision a kid in Brooklyn could make in the mid-1990’s — Red version or Blue.</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1600/1*_MdfIi7rGx6Yz8rqXvcbKQ.jpeg\\\" alt=\\\"Red Blue\\\"></p>\\n<p>Fast forward to 2017.</p>\\n<p>For the majority of my coding journey, I’ve tinkered with mostly JavaScript-related stuff. Node has been my backend of choice and React has been my favorite library. But when there’s so much excitement about a little thing called Python, that is knowledge I couldn’t ignore.</p>\\n<h2>The Python Experiment</h2>\\n<p>To be honest, my interest in Python came more from machine learning and data scraping. Beautiful Soup is fantastic, and the ease of the language makes it so much more attractive to use on a backend, despite having more experience in Node.</p>\\n<p>But while Python has all these more practical features, there will always be room for a short project that tugs at my nostalgia. So I took a couple days to try and make a console application.</p>\\n<p>Why a console application? The terminal is an oft disregarded program that’s use is either for working with Git (for developers) or for completely ignoring in case you cause your computer to blow up (for the non-techies). Becoming comfortable with the console is what all programmers to strive for, and the lack of a true GUI allows the creator to focus solely on what his or her code is doing, and not how it looks on a particular browser.</p>\\n<p>As I scoured the Internet for more examples of what other developers have done in the console, I saw plenty of fantasy-driven storylines, where the hero grabs a sword at some point and fights a dragon. This is all well and good. My original idea was to do something The Legend of Zelda-related. This sort of adventure seemed to fit the bill of a choose your own adventure game. However, the memory of that Toys ‘R’ Us trip in ’97 kept coming back to me.</p>\\n<p>Making decisions is at the heart of the Pokémon formula. While Link deals with adding inventory and fighting enemies, the basis of Pokémon falls on which creature you’ll start with, and how this decision will impact your future as a trainer.</p>\\n<p>The overall code runs pretty simply. The main() function runs in the bottom of the code, then calls the functions that above it. Each decision is a function that features a future function at the bottom of it. At the moment, it is not the most complicated decision tree, but it manages to currently have over a half-dozen outcomes depending on your choices. The code runs in the terminal with the use of a virtual environment, something that I was unfamiliar with, coming from the JavaScript world.</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1200/1*I51KEPyZyOm0AyqOSadG0A.gif\\\" alt=\\\"Start Screen\\\"></p>\\n<p>I had a blast creating this mini-application, but it is, overall, a simple game. There are no classes — this would make a more intricate battle system with hit points and whatnot. Neither am I using Pickle to save progress. The game is currently short enough to finish in one setting. While I could continue with the storyline, travel to gyms, and obtain badges, this would best be served in a future application, where I would create my own characters, implement a true battle system, and make use of the creative writing minor I received while at undergrad.</p>\\n<p>As a lifelong learner and frequent teacher, I will say that creating a fun application like this serves the purpose of teaching without a struggle. More challenging concepts came more naturally because I was having fun. What’s more — seeing the beauty of what Python can create gave me a greater appreciation for JavaScript, a language I’ve played around with all too well, yet never understood how strange it could be when compared with other languages. I even had the pleasure of adding an Easter egg that allows the user to obtain Pikachu as his starting Pokémon. Not bad for a silly console, application, huh?</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1600/1*QtgyiFepJTh9TBjwTsKarg.gif\\\" alt=\\\"Pokemon Choice\\\"></p>\",\"id\":\"/Users/jonathanhaines/Desktop/Code/gatsby/blog-1/src/pages/2017-09-20/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-09-20T09:20:02+00:00\",\"path\":\"/blog/pokemon-python\",\"title\":\"Return of the Consoles: Recreating Pokémon in Python\",\"excerpt\":null,\"tags\":[\"pokemon\",\"python\",\"console\",\"web development\"]}},{\"html\":\"<p>This article first appeared on Medium <a href=\\\"https://hackernoon.com/postgresql-explained-with-basketball-players-f99fb812c065\\\"><strong>here</strong></a></p>\\n<p>Database can be a scary word. It’s often considered large and complicated, but they can work wonders for keeping your application neat and in order. For more on the differences between the two main types of databases, here is a primer that may be of assistance.</p>\\n<p>As for what you’re about to read, I’d strongly recommend following along with PSequel, a GUI on Mac that allows you to see the data you are working with. Basketball, like many sports, is filled with data that makes it more interesting. A stat line is essential a chunk of data. Russell Westbrook might as well be a statistician with his triple-double prowess. And what better way to prepare for the upcoming basketball season than to prepare some databases based on player attributes.</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1200/1*IW1nAu2fLYTDA4P75CDdmA.jpeg\\\" alt=\\\"Russell Westbrook\\\"></p>\\n<p>One more bit of exposition. PostgreSQL is one of the top programs for relational databases. While there are other good ones such as MySQL and SQLite, I have found PostgreSQL to be most favorable since it’s open-sourced and has a pretty great online community.</p>\\n<p>And now, it’s gametime.</p>\\n<h2>Create a Database</h2>\\n<p>Creating a database is simple. First things first, make sure you’re server is running on the command line by running:</p>\\n<p><code>psql</code>\\nNow that you’re logged in, creating a database is as easy as:</p>\\n<p><code>create database (name of database);</code>\\nOnce it’s created, you could see a list of all of your databases with the \\\\l command. To quit from the command line, you can use \\\\q.</p>\\n<h2>Enter PSequel</h2>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1200/1*lUqYbocVY1oP0a2e_Ig5Cw.png\\\" alt=\\\"Connect DB\\\"></p>\\n<p>PSequel is a GUI that makes viewing your data a little easier. I created a database called basketball. Now let’s connect and create some tables.</p>\\n<h2>Table Creation</h2>\\n<p>Once you’ve connected, you’re free to create tables that will organize all of your data. With ‘query’ selected, we can create a table like this:</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/2000/1*dS4iXk4Y-cwCAmLK7wh4XA.png\\\" alt=\\\"Table Players\\\"></p>\\n<p>From above, we can see that I am creating a table called ‘players.’ Inside this table, there will be four rows: an ID (mostly to keep track of how many people I am adding), a first name, a last name, and a team. You’ll notice there is a datatype listed after these, which lets the database know what kind of data to expect. Integer is a number. Varchar stands for a ‘variable-length character’ string. The number following this in parenthesis is the maximum number of characters. For more on what kind of datatypes you can use in PostgreSQL, check out <a href=\\\"https://www.postgresql.org/docs/9.5/static/datatype.html\\\"><strong>this nifty list</strong></a>. So the team listed will only be able to hold three characters. Once this is done, run the query and refresh the page (bottom left).</p>\\n<p>The table, although empty, can now be found in the ‘content’ tab. But we can’t work with an empty table. Let’s add to it.</p>\\n<h2>All About Insert</h2>\\n<p>With your brand new empty table, head back over to query and insert the following:</p>\\n<p><code>INSERT INTO players (id, first_name, last_name, team) VALUES (1, 'Steph', 'Curry', 'GSW');</code></p>\\n<p>Here, I am inserting records into my ‘players’ table. The first set of parenthesis, while not mandatory, tells the database which columns the data will go into. You can put the columns in whatever order you want here, as long as it corresponds to the second parenthesis group. For example, PSequel would not allow it if I tried to put an integer into the first name field. It’s also important that strings (or varchars) are put into quotes.</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1200/1*KIUHPBaix7AjKfF2t8eJPw.gif\\\" alt=\\\"Curry Dance\\\"></p>\\n<p>Easy enough? Alright, let’s add some more data and see how to manipulate it.</p>\\n<h2>Selecting Your All Stars</h2>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1600/1*BWPN3X2jtd0myX3NoCrpcg.png\\\" alt=\\\"All Stars\\\"></p>\\n<p>We have some data to work with\\nFrom the image provided, now we can select and manipulate the players. Quite a squad we have so far. Head back into query and run the following line:</p>\\n<p><code>SELECT * FROM players</code>\\nFrom here, you can see everyone. But what if you only wanted to see players from the Golden State Warriors? Next, run the following lines:</p>\\n<p><code>SELECT * FROM players WHERE team = 'GSW'</code></p>\\n<p>This ‘where’ keyword is especially important when we want to update or delete items from the database. Other keywords can be concatenated to these lines to show even more data.</p>\\n<p>`<code>SELECT * FROM players WHERE team = 'GSW' OR team = 'NY'</code></p>\\n<p>The statement above will show you anyone from either Golden State or New York. Notice the ‘or’ statement.</p>\\n<p><code>SELECT * FROM players WHERE team = 'GSW' AND first_name = 'Steph'</code></p>\\n<p>This statement would return just Steph Curry, since while Klay Thompson does share the same team (GSW), his first name does not match.</p>\\n<p>You may also run greater than, less than, or equal to statements for integers. Take the following example and notice that the first two IDs are not returned.</p>\\n<p><code>SELECT * FROM players WHERE id > 3</code></p>\\n<h1>Updating and Deleting</h1>\\n<p>Let’s now change something in our database. We’ve heard some speculation about Lebron James heading to the Lakers after his contract is up. How can we reflect this in our data:</p>\\n<p><code>UPDATE players SET team = 'LAL' WHERE last_name = 'James'</code></p>\\n<p>The first line specifies the table you are changing. The second line specifies what we are setting. The third line tells us that we only want to change the data that has a last name of James. Like the earlier examples, we could have added more parameters, as well as ‘and’ or ‘or’ statements.</p>\\n<p>Notice that Lebron James now plays for the Los Angeles Lakers. By clicking on the ID column header, we could once again order the players by their IDs (or any other header for that matter.</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1600/1*PYjYWd-1H7KtdGpwLw9vBA.png\\\" alt=\\\"Lebron Laker\\\"></p>\\n<p>Deleting is done in a similar manner, but by using the word ‘delete’ instead of update. And once again, we can add as many parameters as we want. The command below wipes Lebron James from the list.</p>\\n<p><code>DELETE players WHERE last_name = 'James' AND team = 'LAL'</code></p>\\n<p>But he probably wouldn’t like that.</p>\\n<iframe src=\\\"https://giphy.com/embed/xTiTnDAP0RiCo9k85W\\\" width=\\\"480\\\" height=\\\"276\\\" frameBorder=\\\"0\\\" class=\\\"giphy-embed\\\" allowFullScreen></iframe><p><a href=\\\"https://giphy.com/gifs/sbnation-xTiTnDAP0RiCo9k85W\\\"></a></p>\",\"id\":\"/Users/jonathanhaines/Desktop/Code/gatsby/blog-1/src/pages/2017-09-17/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-09-17T09:20:02+00:00\",\"path\":\"/blog/postgresql\",\"title\":\"PostgreSQL, Explained With Basketball Players\",\"excerpt\":null,\"tags\":[\"nba\",\"postgresql\",\"database\",\"web development\"]}},{\"html\":\"<p>This article first appeared on Medium <a href=\\\"https://hackernoon.com/postgresql-explained-with-basketball-players-f99fb812c065\\\"><strong>here</strong></a></p>\\n<p>Computational complexity is a tricky subject to wrap one’s head around. Understanding runtime allows one to see how well a particular algorithm or data structure could scale within a computer. Unfortunately, it may be a bit abstract to try and think like a computer — for example, what does it mean to say that accessing a node in a linked list is O(n) while inserting a node is the more preferred O(1)? To truly get these concepts, let’s use real life (err.. Super Nintendo) examples to figure out what these terms mean. </p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1200/1*BuW10tGA1gyCnUTYP3YeFQ.png\\\" alt=\\\"Big O Cheat Sheet\\\"></p>\\n<p>Here is a graph (from bigocheatsheet.com) that depicts the scalability of different runtime complexities. While all runtimes begin at the same point at the bottom lefthand corner, adding more elements changes how efficient each is. While it might not make a difference whether or not you use an array to store some data in your mini-side project, perhaps that same project might not scale as well once you finally successfully gain the attention of some wealthy investors.</p>\\n<h2>O(1)</h2>\\n<p>O(1), pronounced “oh of one” is simply the best. If it were personified, it would be Michael Jordan. Unless you had access to a time machine, there is no way to have a better runtime.</p>\\n<p>How does it work? Imagine the year is 1991 and you are getting your first experience playing a brand new game called Street Fighter II. Your friend tells you that you should try Guile, because his Sonic Boom is pretty awesome. Unfortunately, the only information you have is the name Guile. You have no idea what he or she looks like and it’s another seven years before Google is founded. You could do a bit of deducing, sure, but you decide there is a quicker way. All you have to do is ask your friend, “Which one of these characters is Guile?”</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1200/1*M2xEJSZfHjgwugvVsARuIA.jpeg\\\" alt=\\\"Street Fighter Original Select Screen\\\"></p>\\n<p>Your friend responds by pointing to Guile after just one question. O(1) means just that — your problem is solved in constant time. It doesn’t matter whether or not there are 8 characters or 800, this is always completed instantaneously.</p>\\n<h2>O(log n)</h2>\\n<p>As effective as the previous method was, the real world is usually not as smooth. The next best thing may be O(log n).</p>\\n<p>O(log n) algorithms are best described as never having to look at the entirety of an input. As in a binary search, O(log n) is basically taking data, splitting it in half, then taking the data you are left with, and splitting that in half. This is done until you reach your answer.</p>\\n<p>To use the Street Fighter example, imagine you ask your friend “Is Guile in the top row?” This drops the original eight fighters to four. By constantly cutting the total number of choices in half, you can eventually reach Guile.</p>\\n<h2>O(n)</h2>\\n<p>O(n) is perhaps the easiest of runtimes to comprehend. The bigger the input, the more time this will take, and they increase at the same rate. In the O(1) section, we discovered the most effective way of figuring out which character is Guile by asking one question. To use O(n), we would ask our friend about each character individually. Starting with the first character, we would ask “is this Guile?” If he says yes, we are done (this is the best-cased scenario). If not, we move onto the next character. With just eight characters to consider, it would take just eight questions (at worst). However, if the input becomes larger, such as if we add eight MORE characters, the runtime becomes slower.</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1600/1*N1-PCyTMbY2qMBJMfzi53Q.png\\\" alt=\\\"Street Fighter Newer Select Screen\\\"> </p>\\n<h2>O(n²)</h2>\\n<p>The complexity of O(n²) is where things get a bit trickier. If you take a look at the Big O graph at the top of this article, you’ll notice that the line that depicts this particular runtime is curved, due to it being polynomial time.</p>\\n<p>Quadratic or polynomial runtimes usually contain nested for-loops. One nested for-loop implies O(n²) while a second nested for-loop would mean O(n³) and so on (with possibly but unlikely exceptions).</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1200/1*glyhac4CbLz25CyUj-ERHA.png\\\" alt=\\\"Street Fighter Cast\\\"></p>\\n<p>How does this work in our Street Fighter example? Imagine you are able to ask the actual characters themselves questions. You approach the first character and ask if his name is Guile. If he responds “yes, I am” (the best-cased scenario), then you are done. However, if his response is “no,” this begins a nested for-loop. This character (let’s say Ryu) then becomes the question master and approaches a second character to do the asking for you. Similarly, he asks this second character (let’s say Ken) one at a time whether or not he is Guile. The process continues until the original question’s response is “yes.” As the graph implies, the larger data makes things last a tad longer.</p>\\n<h2>O(2^n) and O(n!)</h2>\\n<p>Two less common runtime are the exponential O(2^n) and the seemingly forever factorial O(n!). If a program is running in either of these, it would be advised to consider a new approach.</p>\\n<p>O(2^n) is usually seen during a recursive function where you call a function twice within itself such as the Fibonacci example here:</p>\\n<p><code>fib(n) = { return fib(n-1) + fib(n-2) }</code></p>\\n<p>Big O is a lot more complex than a Street Fighter selection screen, but understanding the basics is a good start. Like with Super Nintendo, understanding the more complex aspects of Big O requires plenty of practice and perhaps a bit of reading the instructional booklet.</p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/1600/1*wuby9nnyYE9eo5zgk0H9xw.gif\\\" alt=\\\"Street Fighter Ken Dragon Punch\\\"></p>\",\"id\":\"/Users/jonathanhaines/Desktop/Code/gatsby/blog-1/src/pages/2017-09-11/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-09-11T09:20:02+00:00\",\"path\":\"/blog/big-o\",\"title\":\"The Simplicity of Computational Complexity: Street Fighter II VS. the Big O\",\"excerpt\":null,\"tags\":[\"big o notation\",\"computational complexity\",\"runtime\",\"code\",\"algorithms\",\"data structures\",\"web development\",\"street fighter\"]}}],\"tagName\":\"web development\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tags-web-development.json\n// module id = 421\n// module chunks = 246627563894452"],"sourceRoot":""}